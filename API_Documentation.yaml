openapi: 3.1.0
info:
  title: Document Service API
  version: 1.0.0
paths:
  /job:
    post:
      operationId: PostJob
      summary: fetches job listing
      description: retrieves text from job listing
      requestBody:
        description: POST /job Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
              required:
                - url
      responses:
        "200":
          description: POST /job Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      text:
                        type: string
                    required:
                      - text
                required:
                  - status
                  - data
        "400":
          description: POST /job Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
  /test:
    post:
      operationId: PostTest
      summary: fetches job listing
      description: retrieves text from job listing
      requestBody:
        description: POST /test Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                jobUrl:
                  type: string
              required:
                - jobUrl
      responses:
        "200":
          description: POST /test Positive response
          content:
            application/pdf:
              schema:
                format: any
        "400":
          description: POST /test Negative response
          content:
            text/plain:
              schema:
                type: string
  /resume:
    post:
      operationId: PostResume
      summary: Fetches resume files
      description: Retrieves most up-to-date resume
      requestBody:
        description: POST /resume Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        "200":
          description: POST /resume Positive response
          content:
            application/pdf:
              schema:
                format: any
        "400":
          description: POST /resume Negative response
          content:
            text/plain:
              schema:
                type: string
  /cover:
    post:
      operationId: PostCover
      summary: Fetches cover letter files
      description: Retrieves most up-to-date general cover letter
      requestBody:
        description: POST /cover Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                jobUrl:
                  type: string
              required:
                - jobUrl
      responses:
        "200":
          description: POST /cover Positive response
          content:
            application/pdf:
              schema:
                format: any
        "400":
          description: POST /cover Negative response
          content:
            text/plain:
              schema:
                type: string
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://localhost:3000
